// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum UserRole {
    PATIENT
    DOCTOR
}

enum AppointmentStatus {
    SCHEDULED
    COMPLETED
    CANCELED
    PENDING
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          UserRole  @default(PATIENT)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    patientProfile PatientProfile?
    doctorProfile  DoctorProfile?
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PatientProfile {
    id        String      @id @default(cuid())
    userId    String      @unique
    user      User        @relation(fields: [userId], references: [id])
    dateOfBirth DateTime?
    address   String?
    emergencyContactName  String?
    emergencyContactPhone String?
    appointments Appointment[]
    medicalRecords MedicalRecord[]
    prescriptions Prescription[]
}

model DoctorProfile {
    id         String      @id @default(cuid())
    userId     String      @unique
    user       User        @relation(fields: [userId], references: [id])
    specialty  String?
    credentials String?
    officeAddress String?
    appointments Appointment[]
    medicalRecords MedicalRecord[]
    prescriptions Prescription[]
}

model Appointment {
    id              String      @id @default(cuid())
    appointmentDate DateTime
    duration        Int
    reasonForVisit  String
    notes           String?
    status          AppointmentStatus @default(PENDING)
    createdAt       DateTime    @default(now())
    patientId       String
    patient         PatientProfile @relation(fields: [patientId], references: [id])
    doctorId        String
    doctor          DoctorProfile  @relation(fields: [doctorId], references: [id])
}

model MedicalRecord {
    id            String      @id @default(cuid())
    visitDate     DateTime
    diagnosis     String
    treatmentPlan String
    allergies     String?
    createdAt     DateTime    @default(now())
    patientId     String
    patient       PatientProfile @relation(fields: [patientId], references: [id])
    doctorId      String
    doctor        DoctorProfile  @relation(fields: [doctorId], references: [id])
}

model Prescription {
    id              String      @id @default(cuid())
    medication      String
    dosage          String
    frequency       String
    startDate       DateTime
    endDate         DateTime?
    refillsAvailable Int        @default(0)
    createdAt       DateTime    @default(now())
    patientId       String
    patient         PatientProfile @relation(fields: [patientId], references: [id])
    doctorId        String
    doctor          DoctorProfile  @relation(fields: [doctorId], references: [id])
}
